"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = performSeoReview;

var _jed = _interopRequireDefault(require("jed"));

var _yoastseo = require("yoastseo");

var _default = _interopRequireDefault(require("yoastseo/src/config/content/default.js"));

var _mapResults = _interopRequireDefault(require("./mapResults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function performSeoReview(_x, _x2, _x3) {
  return _performSeoReview.apply(this, arguments);
}

function _performSeoReview() {
  _performSeoReview = _asyncToGenerator(function* (url, keyword, synonyms) {
    var previewUrl = new URL(url); // Tell the API route to just fetch and return the HTML string

    previewUrl.searchParams.append("fetch", "true"); // We fetch the /api/preview route to enable us to examine draft/unpublished content
    // The addition of a &fetch=true searchParam will make the API route perform a fetch request
    // Returning an object which contains the absoluteUrl of final page and its HTML as a string

    return fetch(previewUrl.toString()).then(res => res.text()).then(html => {
      var _htmlDocument$querySe, _htmlDocument$querySe2, _htmlDocument$querySe3, _htmlDocument$querySe4, _htmlDocument$querySe5;

      var parser = new DOMParser();
      var htmlDocument = parser.parseFromString(html, "text/html"); // Check for the existence of our expected data-content identifier

      var dataContent = (_htmlDocument$querySe = htmlDocument.querySelector("[data-content=\"main\"]")) === null || _htmlDocument$querySe === void 0 ? void 0 : _htmlDocument$querySe.innerHTML;
      var fallbackContent = (_htmlDocument$querySe2 = htmlDocument.querySelector("main")) === null || _htmlDocument$querySe2 === void 0 ? void 0 : _htmlDocument$querySe2.innerHTML;
      var content = dataContent !== null && dataContent !== void 0 ? dataContent : fallbackContent;
      var title = (_htmlDocument$querySe3 = htmlDocument.querySelector("title")) === null || _htmlDocument$querySe3 === void 0 ? void 0 : _htmlDocument$querySe3.innerText;
      var description = (_htmlDocument$querySe4 = htmlDocument.querySelector("meta[name=description]")) === null || _htmlDocument$querySe4 === void 0 ? void 0 : _htmlDocument$querySe4.getAttribute("content");
      var canonicalUrl = (_htmlDocument$querySe5 = htmlDocument.querySelector('[rel="canonical"]')) === null || _htmlDocument$querySe5 === void 0 ? void 0 : _htmlDocument$querySe5.getAttribute('href');
      var resPreviewUrl = canonicalUrl ? new URL(canonicalUrl) : {}; // This key is for the absolute URL

      var permalink = [resPreviewUrl === null || resPreviewUrl === void 0 ? void 0 : resPreviewUrl.origin, resPreviewUrl === null || resPreviewUrl === void 0 ? void 0 : resPreviewUrl.pathname].filter(Boolean).join(""); // Confusingly, this key is just the pathname

      var url = resPreviewUrl === null || resPreviewUrl === void 0 ? void 0 : resPreviewUrl.pathname;
      var options = {
        keyword: keyword !== null && keyword !== void 0 ? keyword : "",
        synonyms: synonyms !== null && synonyms !== void 0 ? synonyms : "",
        url: url !== null && url !== void 0 ? url : "",
        permalink: permalink !== null && permalink !== void 0 ? permalink : "",
        title,
        // TODO: Could not find where/how Yoast measures this
        titleWidth: 600,
        description // TODO: Not yet configurable
        // locale: langCulture.replace('-', '_'),

      };
      var paper = new _yoastseo.Paper(content, options);
      var researcher = new _yoastseo.Researcher(paper);
      var i18n = new _jed.default({
        domain: 'js-text-analysis',
        // eslint-disable-next-line camelcase
        locale_data: {
          'js-text-analysis': {
            '': {}
          }
        }
      });
      var hiddenTests = ["UrlLengthAssessment", "TaxonomyTextLengthAssessment"]; // Parent keys are "seo" and "readability"
      // Some assessments are objects, some are functions

      var assessmentResults = Object.keys(_yoastseo.assessments).reduce((parentAcc, parentKey) => {
        // Inside each key are the tests
        parentAcc[parentKey] = Object.keys(_yoastseo.assessments[parentKey]).reduce((childAcc, childKey) => {
          // Some assessments have been depreciated
          if (hiddenTests.includes(childKey)) {
            // console.log(`Hidden:`, childKey)
            return childAcc;
          }

          var CurrentAssessment = _yoastseo.assessments[parentKey][childKey]; // But not all of them are objects with the `getResult` function

          if (typeof CurrentAssessment === "object" && CurrentAssessment.hasOwnProperty("getResult")) {
            childAcc[childKey] = CurrentAssessment.getResult(paper, researcher, i18n);
          } else if (typeof CurrentAssessment === "function") {
            var assessmentConfig = {};

            switch (childKey) {
              case 'FleschReadingEaseAssessment':
                assessmentConfig = _default.default.fleschReading;
                break;

              default:
                break;
            }

            var newAssessment = new CurrentAssessment(assessmentConfig);
            childAcc[childKey] = newAssessment.getResult(paper, researcher, i18n);
          } else {
            // console.log(`Skipped:`, childKey, thisAssessment)
            childAcc[childKey] = {
              text: "Test Skipped"
            };
          }

          return childAcc;
        }, {});
        return parentAcc;
      }, {}); // Now reduce these tests down to a flattened array

      var resultsArray = Object.keys(assessmentResults).reduce((parentAcc, parentCur) => {
        var newArr = Object.keys(assessmentResults[parentCur]).reduce((childAcc, childKey) => {
          var newChild = assessmentResults[parentCur][childKey];
          return newChild ? [...childAcc, newChild] : childAcc;
        }, []);
        return newArr ? [...parentAcc, ...newArr] : parentAcc;
      }, []); // mapResults function is a lightly edited function copied from the Yoast WordPress plugin
      // It adds more details to each score
      // https://github.com/Yoast/wordpress-seo/blob/0742e9b6ba4c0d6ae9d65223267a106b92a6a4a1/js/src/components/contentAnalysis/mapResults.js

      var resultsMapped = (0, _mapResults.default)(resultsArray); // Finally, remove any empty keys

      Object.keys(resultsMapped).forEach(key => {
        if (!resultsMapped[key].length) {
          delete resultsMapped[key];
        }
      });
      return {
        permalink,
        meta: {
          title,
          description
        },
        resultsMapped
      };
    }).catch(err => ({
      error: err.message
    }));
  });
  return _performSeoReview.apply(this, arguments);
}
//# sourceMappingURL=performSeoReview.js.map