"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = asyncCall;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Call item asynchronously if it is a function, otherwise return itself.
 * @param {any} item Potentially callable, possibly async function or promise.
 * @param  {...any} args Arguments to be applied to item if it is a function.
 * @returns {any} Result of promise, async/sync function, or the item if not a function.
 */
function asyncCall(_x) {
  return _asyncCall.apply(this, arguments);
}

function _asyncCall() {
  _asyncCall = _asyncToGenerator(function* (item) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return yield typeof item === 'function' ? item.apply(this, args) : item;
  });
  return _asyncCall.apply(this, arguments);
}
//# sourceMappingURL=asyncCall.js.map